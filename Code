{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W7cVSmHmXOKg"
      },
      "source": [
        "# Sentiment Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yD9WOw38XpWC"
      },
      "source": [
        "## Importing Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "dfMMlIEjiolw"
      },
      "outputs": [],
      "source": [
        "%%capture\n",
        "!pip install datasets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "gkjjMlMCWpGH"
      },
      "outputs": [],
      "source": [
        "# Import basic Libraries\n",
        "import re\n",
        "import pandas as pd\n",
        "from datasets import load_dataset\n",
        "\n",
        "# Import optional Libraries\n",
        "import warnings\n",
        "from tqdm import tqdm\n",
        "\n",
        "# Import NLP Libraries\n",
        "import nltk\n",
        "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "# Import evaluation metrics Libraries\n",
        "from sklearn.metrics import confusion_matrix, classification_report"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "WYKijy48lXt-"
      },
      "outputs": [],
      "source": [
        "tqdm.pandas()\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U_fE7k0OuS_G",
        "outputId": "388e1f40-2d61-41b8-ad65-27c305ecb994"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "nltk.download(['punkt', 'stopwords', 'wordnet', 'vader_lexicon'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hRJe-9nibe1b"
      },
      "source": [
        "## Loading the dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0,
          "referenced_widgets": [
            "58063135624444338862525f0a8b0851",
            "872750970c6845dea8aae41613d40d95",
            "4edcf5b47ebc4235942c8abf0d555604",
            "a8918cb30e9044b79242842f12733303",
            "d8b1110d0251454cbd0006e0ef3df9b9",
            "bc2bbab68e7e41ba9804b9c7b18bb82a",
            "3c19376311734794a7cabdc235f71906",
            "bc671d4abe444d6da2f31f06384da0d5",
            "f22af1a382684f9b880fac83a2abd13b",
            "87d2727ed3d44931b804afd1b435680e",
            "4def6eb8346748ffa5e38cebfe2bf139",
            "0ec86cbb1b50441e9a8732f03dbaeb07",
            "275267361d3b48958682ffb98a9c83f0",
            "5689f043306341638d7a16b29eb0ff19",
            "8e282e15f45a47afa0af9c724174099c",
            "949736df059f4a77895db4c11b3dd2b7",
            "5f4a9ebadf7c4f279cc9a4aa79ec8fa6",
            "ce084634ffd3414d9a0ce579a84d73ae",
            "c383bd75bdc34263a545f2493629c75c",
            "6c5bc86888734f6cb3a74a943b691a06",
            "61c2ef7dfa45440ea4f8e14d8e6f49fc",
            "ee29428d2ecc40cc9a7e6669c4d6df9d",
            "846bf272a9304eacbc28430141479ee1",
            "23a64b903391401da907cac33a8ab13e",
            "be14c676b55e4fd98be79eb1e0da1abd",
            "eb70259ea4914c359bb750ed4f6ee5cf",
            "2c65dd766f8046f68ceaebe0e56c6ba9",
            "c6338c78e80342e09ad15b5e02c41f25",
            "dcc10b99497d47408fc2bcad4e2d8acd",
            "5b42d11534414d8680cf7e10d55b9aff",
            "1f130a0752cf4ab48b8f311279210c47",
            "38fdf84ebd0440d3b1c1c5f4b2e9b287",
            "bf81d793354642df85ec807a12c79858"
          ]
        },
        "id": "Sgs651rz8JeK",
        "outputId": "80e0f1d2-6370-45df-fd0f-1e7c85a82f06"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Downloading readme:   0%|          | 0.00/361 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "58063135624444338862525f0a8b0851"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Downloading data:   0%|          | 0.00/124M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "0ec86cbb1b50441e9a8732f03dbaeb07"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Generating complete split: 0 examples [00:00, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "846bf272a9304eacbc28430141479ee1"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "dataset_id = 'contemmcm/sentiment140'\n",
        "\n",
        "dataset = load_dataset(dataset_id)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U9yUUiA_BkgG",
        "outputId": "d3d18028-b20c-4d35-84ff-4c633e4748c4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'complete': (1600000, 2)}"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "dataset.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "wxpCBIjqBnj_"
      },
      "outputs": [],
      "source": [
        "df = pd.DataFrame(data = dataset['complete'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "yYiauopFEQ4L",
        "outputId": "3cfc8694-077b-4ebd-9b0d-31173167e9ad"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                text  label\n",
              "0  Just back home from a little gathering with so...      1\n",
              "1  Hey @ricebunny i need a web cam!!!   (RiceBunn...      0\n",
              "2  only a couple more days before i have to go to...      0\n",
              "3                 Must admit Zac handled it well!!!       0\n",
              "4  It's warm and sticky but there's no sun  *Sneeze*      0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1e503c34-02ba-4c8f-9658-b0f9b18b88c9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Just back home from a little gathering with so...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Hey @ricebunny i need a web cam!!!   (RiceBunn...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>only a couple more days before i have to go to...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Must admit Zac handled it well!!!</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>It's warm and sticky but there's no sun  *Sneeze*</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e503c34-02ba-4c8f-9658-b0f9b18b88c9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1e503c34-02ba-4c8f-9658-b0f9b18b88c9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1e503c34-02ba-4c8f-9658-b0f9b18b88c9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a3ff9588-6d9e-4caa-8e93-a7c308bfb1e4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3ff9588-6d9e-4caa-8e93-a7c308bfb1e4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a3ff9588-6d9e-4caa-8e93-a7c308bfb1e4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Jy7sFrtkgBq"
      },
      "source": [
        "## Preprocessing the dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "wg8U_UwmjvPT"
      },
      "outputs": [],
      "source": [
        "# create linguistic_preprocessing function\n",
        "def linguistic_preprocessing(text):\n",
        "\n",
        "    # Remove special characters\n",
        "    pattern = r'[@#$%^&*()_!/\\+~\\\\-]'\n",
        "    cleaned_text = re.sub(pattern, '', text)\n",
        "\n",
        "    # Tokenize the text\n",
        "    tokens = word_tokenize(cleaned_text.lower())\n",
        "\n",
        "    # Remove stop words\n",
        "    filtered_tokens = [token for token in tokens if token not in stopwords.words('english')]\n",
        "\n",
        "    # Lemmatize the tokens\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    lemmatized_tokens = [lemmatizer.lemmatize(token) for token in filtered_tokens]\n",
        "\n",
        "    # Join the tokens back into a string\n",
        "    processed_text = ' '.join(lemmatized_tokens)\n",
        "    return processed_text"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "id": "gWMUsX8AknfX",
        "outputId": "26d71fbf-684d-4f64-b69c-4d4d7a138ec6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1600000/1600000 [45:04<00:00, 591.53it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                text  label\n",
              "0  back home little gathering old friend .. reall...      1\n",
              "1  hey ricebunny need web cam ricebunny live > ht...      0\n",
              "2                 couple day go faggot summer school      0\n",
              "3                        must admit zac handled well      0\n",
              "4                       's warm sticky 's sun sneeze      0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3d9bf23-5ede-45f3-ab45-959d68af2f4e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>back home little gathering old friend .. reall...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>hey ricebunny need web cam ricebunny live &gt; ht...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>couple day go faggot summer school</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>must admit zac handled well</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>'s warm sticky 's sun sneeze</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3d9bf23-5ede-45f3-ab45-959d68af2f4e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a3d9bf23-5ede-45f3-ab45-959d68af2f4e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a3d9bf23-5ede-45f3-ab45-959d68af2f4e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-617063b2-c673-48d4-b582-10039795dc33\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-617063b2-c673-48d4-b582-10039795dc33')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-617063b2-c673-48d4-b582-10039795dc33 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "df['text'] = df['text'].progress_apply(linguistic_preprocessing)\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fn2GVtxUdMIT"
      },
      "source": [
        "## NLTK Sentiment Analyzer"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This type of analysis, such as the [NLTK Vader sentiment analyzer](https://github.com/cjhutto/vaderSentiment), involves using a set of predefined rules and heuristics to determine the sentiment of a piece of text. These rules are typically based on lexical and syntactic features of the text, such as the presence of positive or negative words and phrases."
      ],
      "metadata": {
        "id": "ljd0dWKbajvq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Determining sentiment"
      ],
      "metadata": {
        "id": "2u4GK3qdbaFj"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "eLAXsgb2a70n"
      },
      "outputs": [],
      "source": [
        "# initialize NLTK sentiment analyzer\n",
        "analyzer = SentimentIntensityAnalyzer()\n",
        "\n",
        "# create get_sentiment function\n",
        "def get_sentiment(text):\n",
        "    scores = analyzer.polarity_scores(text)\n",
        "    sentiment = 1 if scores['pos'] > 0 else 0\n",
        "\n",
        "    return sentiment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "Dg5wl0Gxk_Uw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "outputId": "fb84b13c-1631-4864-b9d6-b2304c73fd46"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1600000/1600000 [03:12<00:00, 8297.08it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                text  label  sentiment\n",
              "0  back home little gathering old friend .. reall...      1          1\n",
              "1  hey ricebunny need web cam ricebunny live > ht...      0          0\n",
              "2                 couple day go faggot summer school      0          0\n",
              "3                        must admit zac handled well      0          1\n",
              "4                       's warm sticky 's sun sneeze      0          1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ac90bd10-e854-4c76-a209-dda54dfe0754\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>label</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>back home little gathering old friend .. reall...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>hey ricebunny need web cam ricebunny live &gt; ht...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>couple day go faggot summer school</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>must admit zac handled well</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>'s warm sticky 's sun sneeze</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac90bd10-e854-4c76-a209-dda54dfe0754')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ac90bd10-e854-4c76-a209-dda54dfe0754 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ac90bd10-e854-4c76-a209-dda54dfe0754');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-166dce84-981d-4c17-9c77-106dec04539f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-166dce84-981d-4c17-9c77-106dec04539f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-166dce84-981d-4c17-9c77-106dec04539f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "df['sentiment'] = df['text'].progress_apply(get_sentiment)\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ILGWpEmldmI1"
      },
      "source": [
        "### Evaluation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "V8g31ILFdheQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9550a25-cd81-4d84-8fab-8f0730c61cae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[429068 370932]\n",
            " [264113 535887]]\n"
          ]
        }
      ],
      "source": [
        "print(confusion_matrix(df['label'], df['sentiment']))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "AlqAUktddwdX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "666dab9f-640f-4402-de30-71f70c9991b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.54      0.57    800000\n",
            "           1       0.59      0.67      0.63    800000\n",
            "\n",
            "    accuracy                           0.60   1600000\n",
            "   macro avg       0.60      0.60      0.60   1600000\n",
            "weighted avg       0.60      0.60      0.60   1600000\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(classification_report(df['label'], df['sentiment']))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x8XGOZzfTlxu"
      },
      "source": [
        "## ML Based Sentiment Analyzer"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Preparing Data"
      ],
      "metadata": {
        "id": "skNsxU_Sa_aQ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "GKGb-P3LTlGk"
      },
      "outputs": [],
      "source": [
        "all_words = []\n",
        "\n",
        "# Split sentences into words\n",
        "def split_into_words(data):\n",
        "\n",
        "  # Separating words\n",
        "  words = data.split(' ')\n",
        "\n",
        "  # Adding all words to vocabulary\n",
        "  all_words.extend(words)\n",
        "\n",
        "  return words"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "SlhHmGPjTlDb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "45f66ad6-b391-49ae-b0d6-8e9258e0e1ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "1600000it [01:36, 16496.07it/s]\n"
          ]
        }
      ],
      "source": [
        "documents = []\n",
        "\n",
        "for index, data in tqdm(df.iterrows()):\n",
        "\n",
        "  # Spliting into words\n",
        "  words = split_into_words(data['text'])\n",
        "\n",
        "  label = data['label']\n",
        "\n",
        "  # Generating documents\n",
        "  documents.append((words, label))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "FnhqeDPXTlBa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "55b40dae-8a14-406d-cd16-a99aa6ec5559"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(['back',\n",
              "   'home',\n",
              "   'little',\n",
              "   'gathering',\n",
              "   'old',\n",
              "   'friend',\n",
              "   '..',\n",
              "   'really',\n",
              "   'fun',\n",
              "   ',',\n",
              "   \"'re\",\n",
              "   'still',\n",
              "   '.'],\n",
              "  1),\n",
              " (['hey',\n",
              "   'ricebunny',\n",
              "   'need',\n",
              "   'web',\n",
              "   'cam',\n",
              "   'ricebunny',\n",
              "   'live',\n",
              "   '>',\n",
              "   'http',\n",
              "   ':',\n",
              "   'ustre.amzbt'],\n",
              "  0),\n",
              " (['couple', 'day', 'go', 'faggot', 'summer', 'school'], 0)]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "documents[:3]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "lVZDx5K1Tk_G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b9918c5-3572-4e5b-aac6-cdea0144b7c3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "15053259"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "len(all_words)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Words frequency distribution\n",
        "\n",
        "all_words = nltk.FreqDist(w.lower() for w in all_words)\n",
        "word_features = list(all_words)[:1000]                    # Taling only first 1000 data points to save memory & avoid crash"
      ],
      "metadata": {
        "id": "FC8EXU_IZYtJ"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Extracting Word Features"
      ],
      "metadata": {
        "id": "XCBReAhWbDqr"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "2HDptqGzTk8s"
      },
      "outputs": [],
      "source": [
        "# Feature extractor\n",
        "\n",
        "def document_features(document):\n",
        "    document_words = set(document)\n",
        "    features = {}\n",
        "    for word in word_features:\n",
        "        features['{}'.format(word)] = (word in document_words)\n",
        "    return features"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "P0CGWwiHwAd7"
      },
      "outputs": [],
      "source": [
        "# Extracting features from all data documents\n",
        "# featuresets = [(document_features(words), label) for (words, label) in documents]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "iQOIXa3bjQJV"
      },
      "outputs": [],
      "source": [
        "# Using only 10% of data to save memory usage & avoid crash\n",
        "\n",
        "fraction = round(len(documents)/10)\n",
        "sample_doc = documents[ : fraction]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nnCk7o1nj77G",
        "outputId": "a0e63332-e9d4-44e6-daf6-b3ab6833fa4d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 160000/160000 [00:37<00:00, 4271.08it/s]\n"
          ]
        }
      ],
      "source": [
        "# Extracting features from the 10% data documents\n",
        "\n",
        "featuresets = []\n",
        "\n",
        "for (words, label) in tqdm(sample_doc):\n",
        "  featuresets.append((document_features(words), label))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(featuresets[0 : 2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JJYthcdOQ9Cq",
        "outputId": "cc94fe40-42ba-4128-81a4-3b93e21e0a2c"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[({'.': True, ',': True, '?': False, '...': False, \"'s\": False, \"n't\": False, \"'m\": False, ':': False, 'day': False, '..': True, 'good': False, 'get': False, 'like': False, 'go': False, 'http': False, 'got': False, 'u': False, 'today': False, 'work': False, 'love': False, 'time': False, 'going': False, 'lol': False, 'back': True, 'one': False, 'know': False, 'im': False, 'really': True, 'want': False, 'ca': False, 'see': False, 'night': False, 'think': False, 'still': True, 'well': False, 'new': False, 'na': False, 'need': False, 'thanks': False, 'home': True, \"'ll\": False, 'oh': False, '....': False, 'miss': False, '2': False, 'much': False, \"''\": False, '``': False, 'last': False, 'feel': False, 'morning': False, 'hope': False, 'make': False, 'tomorrow': False, 'twitter': False, 'great': False, \"'re\": True, 'haha': False, 'wish': False, 'would': False, 'sad': False, 'come': False, 'fun': True, 'sleep': False, 'right': False, 'week': False, '3': False, 'bad': False, 'could': False, 'happy': False, 'thing': False, \"'ve\": False, 'sorry': False, 'tonight': False, 'friend': True, 'way': False, \"'\": False, 'getting': False, 'gon': False, 'though': False, 'look': False, 'nice': False, 'better': False, 'watching': False, 'say': False, 'yeah': False, 'wait': False, 'bed': False, 'hate': False, 'people': False, 'school': False, 'hour': False, ';': False, 'yes': False, 'guy': False, 'weekend': False, 'even': False, 'hey': False, 'show': False, 'take': False, 'next': False, '<': False, 'dont': False, 'awesome': False, 'thank': False, 'never': False, 'tweet': False, 'soon': False, 'cant': False, 'let': False, 'life': False, 'long': False, 'little': True, 'working': False, 'first': False, 'wan': False, 'movie': False, 'please': False, 'best': False, 'year': False, 'everyone': False, 'tired': False, 'sick': False, '4': False, 'watch': False, 'feeling': False, 'girl': False, 'done': False, 'always': False, 'sure': False, 'ok': False, 'already': False, 'suck': False, 'another': False, 'lot': False, 'find': False, 'cool': False, 'something': False, 'phone': False, 'ready': False, 'man': False, 'x': False, 'made': False, 'yay': False, 'looking': False, 'keep': False, 'song': False, 'yet': False, 'went': False, 'ur': False, 'house': False, 'hurt': False, 'help': False, \"'d\": False, 'ever': False, 'start': False, 'pretty': False, 'thought': False, 'maybe': False, 'trying': False, 'away': False, 'sound': False, 'omg': False, 'summer': False, 'finally': False, 'old': True, 'game': False, 'amazing': False, 'early': False, 'someone': False, 'damn': False, 'guess': False, 'follow': False, 'left': False, 'lost': False, 'bit': False, 'rain': False, 'baby': False, 'mean': False, 'big': False, 'wo': False, 'wow': False, 'nothing': False, 'missed': False, 'hot': False, 'tell': False, 'ya': False, 'try': False, 'bored': False, 'glad': False, 'birthday': False, 'party': False, 'pic': False, 'also': False, 'coming': False, 'weather': False, 'sun': False, 'live': False, 'two': False, 'later': False, 'stuff': False, '1': False, 'play': False, 'hear': False, 'mom': False, 'ugh': False, 'actually': False, '.....': False, 'ta': False, 'saw': False, 'n': False, 'exam': False, 'waiting': False, 'might': False, 'excited': False, 'god': False, 'call': False, 'hard': False, 'yesterday': False, 'said': False, 'car': False, 'world': False, 'thats': False, 'give': False, 'since': False, 'job': False, 'head': False, 'sunday': False, 'late': False, 'hi': False, 'friday': False, 'around': False, 'monday': False, 'video': False, 'many': False, 'music': False, 'check': False, 'luck': False, 'found': False, 'must': False, 'cold': False, 'talk': False, 'put': False, 'read': False, 'beautiful': False, 'follower': False, 'aww': False, 'stop': False, 'making': False, 'gone': False, 'boy': False, 'missing': False, 'may': False, 'end': False, 'poor': False, 'anything': False, 'kid': False, 'family': False, 'least': False, 'woke': False, '5': False, 'okay': False, 'food': False, 'hair': False, 'leave': False, 'tho': False, 'almost': False, 'use': False, 'till': False, 'lunch': False, 'cute': False, 'listening': False, 'far': False, 'book': False, 'iphone': False, 'wanted': False, 'picture': False, 'eat': False, 'month': False, 'dinner': False, 'class': False, 'free': False, 'funny': False, 'enjoy': False, 'sweet': False, 'everything': False, 'shit': False, 'place': False, 'finished': False, 'anyone': False, 'welcome': False, 'believe': False, 'playing': False, 'forward': False, 'thinking': False, 'cry': False, 'mine': False, 'without': False, '>': False, 'r': False, 'update': False, 'idea': False, '=': False, 'totally': False, 'dad': False, 'hahaha': False, 'outside': False, 'win': False, 'stupid': False, 'enough': False, 'buy': False, 'coffee': False, 'real': False, 'room': False, 'wrong': False, 'stay': False, 'anymore': False, 'didnt': False, 'every': False, 'probably': False, 'dog': False, 'ill': False, 'cause': False, 'saturday': False, 'fan': False, 'dream': False, 'eating': False, 'name': False, 'money': False, 'ha': False, 'minute': False, 'busy': False, 'sooo': False, 'w': False, 'lovely': False, 'following': False, 'tv': False, 'xx': False, 'post': False, 'headache': False, 'brother': False, 'came': False, 'whole': False, 'seen': False, 'kinda': False, 'taking': False, 'beach': False, 'face': False, 'mother': False, 'run': False, 'hopefully': False, 'eye': False, 'crazy': False, 'took': False, 'final': False, 'word': False, 'hell': False, 'hello': False, 'computer': False, 'super': False, 'awww': False, '10': False, 'true': False, 'news': False, 'plan': False, 'goodnight': False, 'meet': False, 'half': False, 'forgot': False, 'able': False, 'problem': False, 'hit': False, 'blog': False, 'ago': False, 'else': False, 'either': False, 'leaving': False, 'reading': False, 'rest': False, 'part': False, 'sitting': False, 'shopping': False, 'heart': False, 'b': False, 'send': False, 'photo': False, 'used': False, 'trip': False, 'soo': False, 'full': False, 'mind': False, 'ah': False, 'kind': False, 'boo': False, 'sister': False, 'reply': False, 'seems': False, 'office': False, 'rock': False, 'break': False, 'email': False, 'alone': False, 'fuck': False, 'cuz': False, 'raining': False, 'remember': False, 'change': False, 'talking': False, 'internet': False, 'link': False, 'tried': False, 'watched': False, 'hehe': False, 'btw': False, 'stuck': False, 'hug': False, 'heard': False, 'ticket': False, 'course': False, '6': False, 'pain': False, 'care': False, 'started': False, 'site': False, 'seeing': False, 'wont': False, ']': False, 'drink': False, 'p': False, 'concert': False, 'online': False, 'using': False, 'quite': False, 'add': False, 'mileycyrus': False, 'dude': False, 'awake': False, 'fine': False, 'wake': False, 'season': False, 'person': False, 'loved': False, 'breakfast': False, 'told': False, 'text': False, 'cat': False, 'favorite': False, 'boring': False, 'seriously': False, 'open': False, 'la': False, 'sunny': False, 'pay': False, 'facebook': False, 'bought': False, 'study': False, 'lmao': False, 'broke': False, 'shower': False, 'train': False, 'hand': False, 'starting': False, 'lucky': False, 'turn': False, 'called': False, 'asleep': False, 'drive': False, 'aw': False, 'anyway': False, 'walk': False, 'june': False, 'as': False, 'hungry': False, 'crap': False, 'move': False, 'bring': False, 'til': False, 'afternoon': False, 'heading': False, 'sleeping': False, 'instead': False, 'lady': False, 'red': False, '8': False, 'test': False, 'yea': False, 'jealous': False, 'reason': False, 'xd': False, 'le': False, 'story': False, 'enjoying': False, 'meeting': False, 'city': False, 'tommcfly': False, 'album': False, 'page': False, 'bye': False, 'homework': False, 'second': False, 'finish': False, 'wonderful': False, 'hoping': False, 'sore': False, 'mad': False, 'definitely': False, 'soooo': False, 'sigh': False, 'ice': False, 'together': False, 'running': False, 'set': False, '100': False, 'laptop': False, 'cut': False, 'sometimes': False, 'award': False, 'high': False, 'dead': False, 'holiday': False, 'congrats': False, 'died': False, 'ask': False, 'bout': False, 'goin': False, '7': False, 'message': False, 'couple': False, 'fail': False, 'top': False, 'dear': False, 'happened': False, 'fucking': False, 'moment': False, 'store': False, 'nap': False, 'write': False, 'fall': False, 'church': False, 'star': False, 'bday': False, 'tour': False, 'foot': False, '......': False, 'water': False, 'smile': False, 'ipod': False, 'evening': False, 'youtube': False, 'visit': False, 'short': False, 'worry': False, 'side': False, 'ppl': False, 'tea': False, 'ddlovato': False, 'perfect': False, 'dance': False, 'town': False, 'nite': False, 'point': False, 'happen': False, 'ive': False, 'studying': False, 'weird': False, 'close': False, 'gym': False, 'mood': False, '12': False, 'ride': False, 'date': False, 'list': False, '[': False, 'listen': False, 'wonder': False, 'hang': False, 'line': False, 'seem': False, 'min': False, 'lil': False, 'loving': False, 'account': False, 'math': False, 'cream': False, 'mum': False, 'interesting': False, 'english': False, 'catch': False, 'fb': False, 'ate': False, 'agree': False, 'clean': False, 'chocolate': False, 'episode': False, 'pool': False, 'knew': False, 'ahh': False, 'writing': False, 'band': False, 'worst': False, 'window': False, 'saying': False, 'wishing': False, 'wedding': False, 'london': False, 'chance': False, 'fast': False, 'broken': False, 'unfortunately': False, 'flight': False, 'hmm': False, 'air': False, 'worth': False, 'yep': False, 'throat': False, 'vote': False, 'da': False, 'supposed': False, 'park': False, 'moving': False, 'via': False, 'past': False, 'driving': False, 'team': False, 'three': False, 'question': False, 'sunshine': False, '1st': False, 'pick': False, 'sleepy': False, 'sat': False, 'forget': False, 'xxx': False, 'card': False, 'cleaning': False, 'black': False, 'sent': False, 'gave': False, 'horrible': False, 'parent': False, 'understand': False, 'number': False, 'followfriday': False, 'c': False, 'mac': False, 'answer': False, 'college': False, 'drinking': False, 'tweeting': False, 'comment': False, 'whats': False, 'tuesday': False, 'jonas': False, 'green': False, 'paper': False, 'moon': False, 'website': False, 'bet': False, 'leg': False, '20': False, 'cake': False, 'finger': False, 'upset': False, 'project': False, 'worse': False, 'beer': False, 'slow': False, 'special': False, 'doesnt': False, 'rather': False, 'vacation': False, 'longer': False, 'easy': False, 'blue': False, 'fell': False, 'apparently': False, 'bus': False, 'scared': False, 'body': False, 'due': False, 'shop': False, 'shoe': False, 'nope': False, 'spent': False, 'wtf': False, 'mtv': False, 'huge': False, 'wear': False, 'miley': False, 'plus': False, 'dress': False, 'flu': False, 'beat': False, 'woman': False, 'fair': False, 'earlier': False, 'cousin': False, 'hanging': False, 'spend': False, 'voice': False, 'figure': False, 'thx': False, 'ahhh': False, 'join': False, 'wondering': False, 'shame': False, 'kill': False, 'load': False, 'thursday': False, 'babe': False, 'forever': False, 'cheer': False, 'white': False, 'idk': False, 'lazy': False, 'laugh': False, 'shot': False, 'especially': False, 'chat': False, 'slept': False, '9': False, 'support': False, 'age': False, 'camera': False, 'david': False, 'stomach': False, 'light': False, 'dm': False, 'son': False, 'boyfriend': False, 'power': False, 'garden': False, 'cd': False, 'uk': False, 'sadly': False, 'tom': False, '30': False, 'apple': False, 'warm': False, 'july': False, 'inside': False, 'die': False, 'looked': False, 'airport': False, 'google': False, 'different': False, 'learn': False, 'fix': False, 'sign': False, 'jonasbrothers': False, 'co': False, 'havent': False, 'bike': False, 'si': False, '|': False, 'pizza': False, 'myspace': False, 'father': False, 'meant': False, 'case': False, 'road': False, 'yummy': False, 'bbq': False, 'met': False, 'sims': False, 'save': False, 'liked': False, 'safe': False, 'service': False, 'officially': False, 'rainy': False, 'small': False, 'shirt': False, 'luv': False, 'graduation': False, 'except': False, 'tummy': False, 'chicken': False, '2day': False, 'note': False, 'bitch': False, 'hill': False, 'absolutely': False, 'hospital': False, 'film': False, 'doctor': False, 'box': False, 'hr': False, 'radio': False, 'goodbye': False, 'l': False, 'hubby': False, 'shall': False, 'worked': False, 'felt': False, 'share': False, 'decided': False, 'club': False, 'proud': False, 'alright': False, 'cup': False, 'fact': False, 'lonely': False, 'needed': False, 'order': False, 'wit': False, 'yup': False, 'wine': False, 'v': False, 'fly': False, 'wednesday': False, 'gorgeous': False, 'played': False, 'annoying': False, 'twilight': False, 'exactly': False, 'hmmm': False, 'exciting': False, 'interview': False, 'issue': False, 'glass': False, 'front': False, 'dvd': False, 'company': False, 'lame': False, 'taken': False, '15': False, 'living': False, 'bag': False, 'ouch': False, 'french': False, 'business': False, 'xoxo': False, 'pink': False, 'woo': False, 'packing': False, 'storm': False, 'scary': False, 'smell': False, 'bro': False, 'near': False, 'bar': False, 'turned': False, 'isnt': False, 'happens': False, 'wife': False, '`': False, 'jus': False, 'realized': False, 'em': False, '2nd': False, 'drunk': False, 'everybody': False, 'version': False, 'behind': False, 'sold': False, 'guitar': False, 'gettin': False, 'pas': False, 'touch': False, 'waking': False, 'yr': False, 'download': False, 'although': False, 'bc': False, 'mate': False, 'daughter': False, 'door': False, 'yo': False, 'clothes': False, 'matter': False, 'ear': False, 'mommy': False, 'state': False, 'killing': False, 'relaxing': False, 'vega': False, 'giving': False, 'hangover': False, 'puppy': False, 'whatever': False, 'mile': False, 'walking': False, 'lose': False, 'deal': False, 'event': False, 'child': False, 'along': False, 'single': False, 'app': False, 'ball': False, 'hahah': False, 'tear': False, 'hold': False, 'plane': False, 'art': False, 'revision': False, 'round': False, 'alot': False, 'terrible': False, 'enjoyed': False, 'country': False, 'sale': False, 'arm': False, 'fantastic': False, 'random': False, 'passed': False, 'lakers': False, 'posted': False, 'taste': False, 'shoot': False, 'group': False, 'ahead': False, 'hotel': False, 'eh': False, 'staying': False, 'sit': False, 'bb': False, 'asked': False, 'huh': False, 'indeed': False, 'ohh': False, 'hun': False, 'aint': False, 'kiss': False, 'history': False, 'singing': False, 'bummed': False, 'lately': False, 'cook': False, 'web': False, 'gosh': False, 'dying': False, 'fit': False, 'death': False, 'buddy': False, 'dark': False, 'camp': False, 'vip': False, 'completely': False, 'bird': False, 'fml': False, 'drop': False, 'upload': False, 'peace': False, 'nobody': False, 'currently': False, 'usually': False, 'changed': False, 'headed': False, 'profile': False, 'freaking': False, 'disappointed': False, 'pc': False, 'daddy': False, 'wearing': False, 'bloody': False, 'extra': False, 'traffic': False, 'memory': False, 'awful': False, 'worried': False, 'joke': False, 'nick': False, '11': False, 'street': False, 'tweetdeck': False, 'ff': False, 'e': False, 'type': False, 'quick': False, 'sing': False, 'ran': False, 'exhausted': False, 'serious': False, 'fat': False, 'yum': False, 'sexy': False, 'nose': False, 'bug': False, 'record': False, 'watchin': False, 'cheese': False, 'others': False, 'trouble': False, 'somewhere': False, 'caught': False, 'spending': False, 'gay': False, 'itunes': False, 'ache': False, 'nearly': False, '.......': False, 'kick': False, 'dunno': False, 'chillin': False, 'pissed': False, 'awwww': False, 'blood': False, 'track': False}, 1), ({'.': False, ',': False, '?': False, '...': False, \"'s\": False, \"n't\": False, \"'m\": False, ':': True, 'day': False, '..': False, 'good': False, 'get': False, 'like': False, 'go': False, 'http': True, 'got': False, 'u': False, 'today': False, 'work': False, 'love': False, 'time': False, 'going': False, 'lol': False, 'back': False, 'one': False, 'know': False, 'im': False, 'really': False, 'want': False, 'ca': False, 'see': False, 'night': False, 'think': False, 'still': False, 'well': False, 'new': False, 'na': False, 'need': True, 'thanks': False, 'home': False, \"'ll\": False, 'oh': False, '....': False, 'miss': False, '2': False, 'much': False, \"''\": False, '``': False, 'last': False, 'feel': False, 'morning': False, 'hope': False, 'make': False, 'tomorrow': False, 'twitter': False, 'great': False, \"'re\": False, 'haha': False, 'wish': False, 'would': False, 'sad': False, 'come': False, 'fun': False, 'sleep': False, 'right': False, 'week': False, '3': False, 'bad': False, 'could': False, 'happy': False, 'thing': False, \"'ve\": False, 'sorry': False, 'tonight': False, 'friend': False, 'way': False, \"'\": False, 'getting': False, 'gon': False, 'though': False, 'look': False, 'nice': False, 'better': False, 'watching': False, 'say': False, 'yeah': False, 'wait': False, 'bed': False, 'hate': False, 'people': False, 'school': False, 'hour': False, ';': False, 'yes': False, 'guy': False, 'weekend': False, 'even': False, 'hey': True, 'show': False, 'take': False, 'next': False, '<': False, 'dont': False, 'awesome': False, 'thank': False, 'never': False, 'tweet': False, 'soon': False, 'cant': False, 'let': False, 'life': False, 'long': False, 'little': False, 'working': False, 'first': False, 'wan': False, 'movie': False, 'please': False, 'best': False, 'year': False, 'everyone': False, 'tired': False, 'sick': False, '4': False, 'watch': False, 'feeling': False, 'girl': False, 'done': False, 'always': False, 'sure': False, 'ok': False, 'already': False, 'suck': False, 'another': False, 'lot': False, 'find': False, 'cool': False, 'something': False, 'phone': False, 'ready': False, 'man': False, 'x': False, 'made': False, 'yay': False, 'looking': False, 'keep': False, 'song': False, 'yet': False, 'went': False, 'ur': False, 'house': False, 'hurt': False, 'help': False, \"'d\": False, 'ever': False, 'start': False, 'pretty': False, 'thought': False, 'maybe': False, 'trying': False, 'away': False, 'sound': False, 'omg': False, 'summer': False, 'finally': False, 'old': False, 'game': False, 'amazing': False, 'early': False, 'someone': False, 'damn': False, 'guess': False, 'follow': False, 'left': False, 'lost': False, 'bit': False, 'rain': False, 'baby': False, 'mean': False, 'big': False, 'wo': False, 'wow': False, 'nothing': False, 'missed': False, 'hot': False, 'tell': False, 'ya': False, 'try': False, 'bored': False, 'glad': False, 'birthday': False, 'party': False, 'pic': False, 'also': False, 'coming': False, 'weather': False, 'sun': False, 'live': True, 'two': False, 'later': False, 'stuff': False, '1': False, 'play': False, 'hear': False, 'mom': False, 'ugh': False, 'actually': False, '.....': False, 'ta': False, 'saw': False, 'n': False, 'exam': False, 'waiting': False, 'might': False, 'excited': False, 'god': False, 'call': False, 'hard': False, 'yesterday': False, 'said': False, 'car': False, 'world': False, 'thats': False, 'give': False, 'since': False, 'job': False, 'head': False, 'sunday': False, 'late': False, 'hi': False, 'friday': False, 'around': False, 'monday': False, 'video': False, 'many': False, 'music': False, 'check': False, 'luck': False, 'found': False, 'must': False, 'cold': False, 'talk': False, 'put': False, 'read': False, 'beautiful': False, 'follower': False, 'aww': False, 'stop': False, 'making': False, 'gone': False, 'boy': False, 'missing': False, 'may': False, 'end': False, 'poor': False, 'anything': False, 'kid': False, 'family': False, 'least': False, 'woke': False, '5': False, 'okay': False, 'food': False, 'hair': False, 'leave': False, 'tho': False, 'almost': False, 'use': False, 'till': False, 'lunch': False, 'cute': False, 'listening': False, 'far': False, 'book': False, 'iphone': False, 'wanted': False, 'picture': False, 'eat': False, 'month': False, 'dinner': False, 'class': False, 'free': False, 'funny': False, 'enjoy': False, 'sweet': False, 'everything': False, 'shit': False, 'place': False, 'finished': False, 'anyone': False, 'welcome': False, 'believe': False, 'playing': False, 'forward': False, 'thinking': False, 'cry': False, 'mine': False, 'without': False, '>': True, 'r': False, 'update': False, 'idea': False, '=': False, 'totally': False, 'dad': False, 'hahaha': False, 'outside': False, 'win': False, 'stupid': False, 'enough': False, 'buy': False, 'coffee': False, 'real': False, 'room': False, 'wrong': False, 'stay': False, 'anymore': False, 'didnt': False, 'every': False, 'probably': False, 'dog': False, 'ill': False, 'cause': False, 'saturday': False, 'fan': False, 'dream': False, 'eating': False, 'name': False, 'money': False, 'ha': False, 'minute': False, 'busy': False, 'sooo': False, 'w': False, 'lovely': False, 'following': False, 'tv': False, 'xx': False, 'post': False, 'headache': False, 'brother': False, 'came': False, 'whole': False, 'seen': False, 'kinda': False, 'taking': False, 'beach': False, 'face': False, 'mother': False, 'run': False, 'hopefully': False, 'eye': False, 'crazy': False, 'took': False, 'final': False, 'word': False, 'hell': False, 'hello': False, 'computer': False, 'super': False, 'awww': False, '10': False, 'true': False, 'news': False, 'plan': False, 'goodnight': False, 'meet': False, 'half': False, 'forgot': False, 'able': False, 'problem': False, 'hit': False, 'blog': False, 'ago': False, 'else': False, 'either': False, 'leaving': False, 'reading': False, 'rest': False, 'part': False, 'sitting': False, 'shopping': False, 'heart': False, 'b': False, 'send': False, 'photo': False, 'used': False, 'trip': False, 'soo': False, 'full': False, 'mind': False, 'ah': False, 'kind': False, 'boo': False, 'sister': False, 'reply': False, 'seems': False, 'office': False, 'rock': False, 'break': False, 'email': False, 'alone': False, 'fuck': False, 'cuz': False, 'raining': False, 'remember': False, 'change': False, 'talking': False, 'internet': False, 'link': False, 'tried': False, 'watched': False, 'hehe': False, 'btw': False, 'stuck': False, 'hug': False, 'heard': False, 'ticket': False, 'course': False, '6': False, 'pain': False, 'care': False, 'started': False, 'site': False, 'seeing': False, 'wont': False, ']': False, 'drink': False, 'p': False, 'concert': False, 'online': False, 'using': False, 'quite': False, 'add': False, 'mileycyrus': False, 'dude': False, 'awake': False, 'fine': False, 'wake': False, 'season': False, 'person': False, 'loved': False, 'breakfast': False, 'told': False, 'text': False, 'cat': False, 'favorite': False, 'boring': False, 'seriously': False, 'open': False, 'la': False, 'sunny': False, 'pay': False, 'facebook': False, 'bought': False, 'study': False, 'lmao': False, 'broke': False, 'shower': False, 'train': False, 'hand': False, 'starting': False, 'lucky': False, 'turn': False, 'called': False, 'asleep': False, 'drive': False, 'aw': False, 'anyway': False, 'walk': False, 'june': False, 'as': False, 'hungry': False, 'crap': False, 'move': False, 'bring': False, 'til': False, 'afternoon': False, 'heading': False, 'sleeping': False, 'instead': False, 'lady': False, 'red': False, '8': False, 'test': False, 'yea': False, 'jealous': False, 'reason': False, 'xd': False, 'le': False, 'story': False, 'enjoying': False, 'meeting': False, 'city': False, 'tommcfly': False, 'album': False, 'page': False, 'bye': False, 'homework': False, 'second': False, 'finish': False, 'wonderful': False, 'hoping': False, 'sore': False, 'mad': False, 'definitely': False, 'soooo': False, 'sigh': False, 'ice': False, 'together': False, 'running': False, 'set': False, '100': False, 'laptop': False, 'cut': False, 'sometimes': False, 'award': False, 'high': False, 'dead': False, 'holiday': False, 'congrats': False, 'died': False, 'ask': False, 'bout': False, 'goin': False, '7': False, 'message': False, 'couple': False, 'fail': False, 'top': False, 'dear': False, 'happened': False, 'fucking': False, 'moment': False, 'store': False, 'nap': False, 'write': False, 'fall': False, 'church': False, 'star': False, 'bday': False, 'tour': False, 'foot': False, '......': False, 'water': False, 'smile': False, 'ipod': False, 'evening': False, 'youtube': False, 'visit': False, 'short': False, 'worry': False, 'side': False, 'ppl': False, 'tea': False, 'ddlovato': False, 'perfect': False, 'dance': False, 'town': False, 'nite': False, 'point': False, 'happen': False, 'ive': False, 'studying': False, 'weird': False, 'close': False, 'gym': False, 'mood': False, '12': False, 'ride': False, 'date': False, 'list': False, '[': False, 'listen': False, 'wonder': False, 'hang': False, 'line': False, 'seem': False, 'min': False, 'lil': False, 'loving': False, 'account': False, 'math': False, 'cream': False, 'mum': False, 'interesting': False, 'english': False, 'catch': False, 'fb': False, 'ate': False, 'agree': False, 'clean': False, 'chocolate': False, 'episode': False, 'pool': False, 'knew': False, 'ahh': False, 'writing': False, 'band': False, 'worst': False, 'window': False, 'saying': False, 'wishing': False, 'wedding': False, 'london': False, 'chance': False, 'fast': False, 'broken': False, 'unfortunately': False, 'flight': False, 'hmm': False, 'air': False, 'worth': False, 'yep': False, 'throat': False, 'vote': False, 'da': False, 'supposed': False, 'park': False, 'moving': False, 'via': False, 'past': False, 'driving': False, 'team': False, 'three': False, 'question': False, 'sunshine': False, '1st': False, 'pick': False, 'sleepy': False, 'sat': False, 'forget': False, 'xxx': False, 'card': False, 'cleaning': False, 'black': False, 'sent': False, 'gave': False, 'horrible': False, 'parent': False, 'understand': False, 'number': False, 'followfriday': False, 'c': False, 'mac': False, 'answer': False, 'college': False, 'drinking': False, 'tweeting': False, 'comment': False, 'whats': False, 'tuesday': False, 'jonas': False, 'green': False, 'paper': False, 'moon': False, 'website': False, 'bet': False, 'leg': False, '20': False, 'cake': False, 'finger': False, 'upset': False, 'project': False, 'worse': False, 'beer': False, 'slow': False, 'special': False, 'doesnt': False, 'rather': False, 'vacation': False, 'longer': False, 'easy': False, 'blue': False, 'fell': False, 'apparently': False, 'bus': False, 'scared': False, 'body': False, 'due': False, 'shop': False, 'shoe': False, 'nope': False, 'spent': False, 'wtf': False, 'mtv': False, 'huge': False, 'wear': False, 'miley': False, 'plus': False, 'dress': False, 'flu': False, 'beat': False, 'woman': False, 'fair': False, 'earlier': False, 'cousin': False, 'hanging': False, 'spend': False, 'voice': False, 'figure': False, 'thx': False, 'ahhh': False, 'join': False, 'wondering': False, 'shame': False, 'kill': False, 'load': False, 'thursday': False, 'babe': False, 'forever': False, 'cheer': False, 'white': False, 'idk': False, 'lazy': False, 'laugh': False, 'shot': False, 'especially': False, 'chat': False, 'slept': False, '9': False, 'support': False, 'age': False, 'camera': False, 'david': False, 'stomach': False, 'light': False, 'dm': False, 'son': False, 'boyfriend': False, 'power': False, 'garden': False, 'cd': False, 'uk': False, 'sadly': False, 'tom': False, '30': False, 'apple': False, 'warm': False, 'july': False, 'inside': False, 'die': False, 'looked': False, 'airport': False, 'google': False, 'different': False, 'learn': False, 'fix': False, 'sign': False, 'jonasbrothers': False, 'co': False, 'havent': False, 'bike': False, 'si': False, '|': False, 'pizza': False, 'myspace': False, 'father': False, 'meant': False, 'case': False, 'road': False, 'yummy': False, 'bbq': False, 'met': False, 'sims': False, 'save': False, 'liked': False, 'safe': False, 'service': False, 'officially': False, 'rainy': False, 'small': False, 'shirt': False, 'luv': False, 'graduation': False, 'except': False, 'tummy': False, 'chicken': False, '2day': False, 'note': False, 'bitch': False, 'hill': False, 'absolutely': False, 'hospital': False, 'film': False, 'doctor': False, 'box': False, 'hr': False, 'radio': False, 'goodbye': False, 'l': False, 'hubby': False, 'shall': False, 'worked': False, 'felt': False, 'share': False, 'decided': False, 'club': False, 'proud': False, 'alright': False, 'cup': False, 'fact': False, 'lonely': False, 'needed': False, 'order': False, 'wit': False, 'yup': False, 'wine': False, 'v': False, 'fly': False, 'wednesday': False, 'gorgeous': False, 'played': False, 'annoying': False, 'twilight': False, 'exactly': False, 'hmmm': False, 'exciting': False, 'interview': False, 'issue': False, 'glass': False, 'front': False, 'dvd': False, 'company': False, 'lame': False, 'taken': False, '15': False, 'living': False, 'bag': False, 'ouch': False, 'french': False, 'business': False, 'xoxo': False, 'pink': False, 'woo': False, 'packing': False, 'storm': False, 'scary': False, 'smell': False, 'bro': False, 'near': False, 'bar': False, 'turned': False, 'isnt': False, 'happens': False, 'wife': False, '`': False, 'jus': False, 'realized': False, 'em': False, '2nd': False, 'drunk': False, 'everybody': False, 'version': False, 'behind': False, 'sold': False, 'guitar': False, 'gettin': False, 'pas': False, 'touch': False, 'waking': False, 'yr': False, 'download': False, 'although': False, 'bc': False, 'mate': False, 'daughter': False, 'door': False, 'yo': False, 'clothes': False, 'matter': False, 'ear': False, 'mommy': False, 'state': False, 'killing': False, 'relaxing': False, 'vega': False, 'giving': False, 'hangover': False, 'puppy': False, 'whatever': False, 'mile': False, 'walking': False, 'lose': False, 'deal': False, 'event': False, 'child': False, 'along': False, 'single': False, 'app': False, 'ball': False, 'hahah': False, 'tear': False, 'hold': False, 'plane': False, 'art': False, 'revision': False, 'round': False, 'alot': False, 'terrible': False, 'enjoyed': False, 'country': False, 'sale': False, 'arm': False, 'fantastic': False, 'random': False, 'passed': False, 'lakers': False, 'posted': False, 'taste': False, 'shoot': False, 'group': False, 'ahead': False, 'hotel': False, 'eh': False, 'staying': False, 'sit': False, 'bb': False, 'asked': False, 'huh': False, 'indeed': False, 'ohh': False, 'hun': False, 'aint': False, 'kiss': False, 'history': False, 'singing': False, 'bummed': False, 'lately': False, 'cook': False, 'web': True, 'gosh': False, 'dying': False, 'fit': False, 'death': False, 'buddy': False, 'dark': False, 'camp': False, 'vip': False, 'completely': False, 'bird': False, 'fml': False, 'drop': False, 'upload': False, 'peace': False, 'nobody': False, 'currently': False, 'usually': False, 'changed': False, 'headed': False, 'profile': False, 'freaking': False, 'disappointed': False, 'pc': False, 'daddy': False, 'wearing': False, 'bloody': False, 'extra': False, 'traffic': False, 'memory': False, 'awful': False, 'worried': False, 'joke': False, 'nick': False, '11': False, 'street': False, 'tweetdeck': False, 'ff': False, 'e': False, 'type': False, 'quick': False, 'sing': False, 'ran': False, 'exhausted': False, 'serious': False, 'fat': False, 'yum': False, 'sexy': False, 'nose': False, 'bug': False, 'record': False, 'watchin': False, 'cheese': False, 'others': False, 'trouble': False, 'somewhere': False, 'caught': False, 'spending': False, 'gay': False, 'itunes': False, 'ache': False, 'nearly': False, '.......': False, 'kick': False, 'dunno': False, 'chillin': False, 'pissed': False, 'awwww': False, 'blood': False, 'track': False}, 0)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Split for train & test"
      ],
      "metadata": {
        "id": "IYza4vkVbOAK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "PdAO8qfGUi6b"
      },
      "outputs": [],
      "source": [
        "# Splitting for train & test\n",
        "test_set_size = round(len(featuresets)/20)\n",
        "train_set, test_set = featuresets[test_set_size : ], featuresets[ : test_set_size]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Training"
      ],
      "metadata": {
        "id": "34be51ATazk2"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "L1SQ9cPsUiqH"
      },
      "outputs": [],
      "source": [
        "# Train Naive Bayes classifier\n",
        "classifier = nltk.NaiveBayesClassifier.train(train_set)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Evaluation"
      ],
      "metadata": {
        "id": "P3A0DtfYavwK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "D6axyFLFUthr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3be9d276-a9c3-4b11-b066-ea15834aa724"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.737625\n"
          ]
        }
      ],
      "source": [
        "# Test the classifier\n",
        "print(nltk.classify.accuracy(classifier, test_set))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QT5KPQIBUuKY"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": [],
      "collapsed_sections": [
        "yD9WOw38XpWC",
        "hRJe-9nibe1b",
        "0Jy7sFrtkgBq",
        "2u4GK3qdbaFj",
        "ILGWpEmldmI1",
        "skNsxU_Sa_aQ",
        "XCBReAhWbDqr",
        "IYza4vkVbOAK"
      ]
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "58063135624444338862525f0a8b0851": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_872750970c6845dea8aae41613d40d95",
              "IPY_MODEL_4edcf5b47ebc4235942c8abf0d555604",
              "IPY_MODEL_a8918cb30e9044b79242842f12733303"
            ],
            "layout": "IPY_MODEL_d8b1110d0251454cbd0006e0ef3df9b9"
          }
        },
        "872750970c6845dea8aae41613d40d95": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bc2bbab68e7e41ba9804b9c7b18bb82a",
            "placeholder": "​",
            "style": "IPY_MODEL_3c19376311734794a7cabdc235f71906",
            "value": "Downloading readme: 100%"
          }
        },
        "4edcf5b47ebc4235942c8abf0d555604": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bc671d4abe444d6da2f31f06384da0d5",
            "max": 361,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f22af1a382684f9b880fac83a2abd13b",
            "value": 361
          }
        },
        "a8918cb30e9044b79242842f12733303": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_87d2727ed3d44931b804afd1b435680e",
            "placeholder": "​",
            "style": "IPY_MODEL_4def6eb8346748ffa5e38cebfe2bf139",
            "value": " 361/361 [00:00&lt;00:00, 12.5kB/s]"
          }
        },
        "d8b1110d0251454cbd0006e0ef3df9b9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bc2bbab68e7e41ba9804b9c7b18bb82a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3c19376311734794a7cabdc235f71906": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bc671d4abe444d6da2f31f06384da0d5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f22af1a382684f9b880fac83a2abd13b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "87d2727ed3d44931b804afd1b435680e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4def6eb8346748ffa5e38cebfe2bf139": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0ec86cbb1b50441e9a8732f03dbaeb07": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_275267361d3b48958682ffb98a9c83f0",
              "IPY_MODEL_5689f043306341638d7a16b29eb0ff19",
              "IPY_MODEL_8e282e15f45a47afa0af9c724174099c"
            ],
            "layout": "IPY_MODEL_949736df059f4a77895db4c11b3dd2b7"
          }
        },
        "275267361d3b48958682ffb98a9c83f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5f4a9ebadf7c4f279cc9a4aa79ec8fa6",
            "placeholder": "​",
            "style": "IPY_MODEL_ce084634ffd3414d9a0ce579a84d73ae",
            "value": "Downloading data: 100%"
          }
        },
        "5689f043306341638d7a16b29eb0ff19": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c383bd75bdc34263a545f2493629c75c",
            "max": 123635617,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6c5bc86888734f6cb3a74a943b691a06",
            "value": 123635617
          }
        },
        "8e282e15f45a47afa0af9c724174099c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_61c2ef7dfa45440ea4f8e14d8e6f49fc",
            "placeholder": "​",
            "style": "IPY_MODEL_ee29428d2ecc40cc9a7e6669c4d6df9d",
            "value": " 124M/124M [00:03&lt;00:00, 24.6MB/s]"
          }
        },
        "949736df059f4a77895db4c11b3dd2b7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5f4a9ebadf7c4f279cc9a4aa79ec8fa6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ce084634ffd3414d9a0ce579a84d73ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c383bd75bdc34263a545f2493629c75c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6c5bc86888734f6cb3a74a943b691a06": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "61c2ef7dfa45440ea4f8e14d8e6f49fc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ee29428d2ecc40cc9a7e6669c4d6df9d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "846bf272a9304eacbc28430141479ee1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_23a64b903391401da907cac33a8ab13e",
              "IPY_MODEL_be14c676b55e4fd98be79eb1e0da1abd",
              "IPY_MODEL_eb70259ea4914c359bb750ed4f6ee5cf"
            ],
            "layout": "IPY_MODEL_2c65dd766f8046f68ceaebe0e56c6ba9"
          }
        },
        "23a64b903391401da907cac33a8ab13e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c6338c78e80342e09ad15b5e02c41f25",
            "placeholder": "​",
            "style": "IPY_MODEL_dcc10b99497d47408fc2bcad4e2d8acd",
            "value": "Generating complete split: "
          }
        },
        "be14c676b55e4fd98be79eb1e0da1abd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5b42d11534414d8680cf7e10d55b9aff",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1f130a0752cf4ab48b8f311279210c47",
            "value": 1
          }
        },
        "eb70259ea4914c359bb750ed4f6ee5cf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_38fdf84ebd0440d3b1c1c5f4b2e9b287",
            "placeholder": "​",
            "style": "IPY_MODEL_bf81d793354642df85ec807a12c79858",
            "value": " 1600000/0 [00:05&lt;00:00, 239411.47 examples/s]"
          }
        },
        "2c65dd766f8046f68ceaebe0e56c6ba9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c6338c78e80342e09ad15b5e02c41f25": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dcc10b99497d47408fc2bcad4e2d8acd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5b42d11534414d8680cf7e10d55b9aff": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "1f130a0752cf4ab48b8f311279210c47": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "38fdf84ebd0440d3b1c1c5f4b2e9b287": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bf81d793354642df85ec807a12c79858": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
